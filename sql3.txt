
Exercice 5:
1) SELECT L.location_id, L.street_address, L.city, L.state_province, C.country_name 
FROM Locations L NATURAL JOIN Countries C;
2)
- SELECT last_name, department_id, department_name
 FROM Employees JOIN Departments 
 USING (department_id);
- SELECT e.last_name, d.department_id, d.department_name FROM Employees e, 
Departments d where e.department_id = d.department_id;
3)
- SELECT E.last_name, E.job_id, E.department_id, D.department_name
FROM Employees E JOIN Departments D ON E.department_id = D.department_id
JOIN Locations L ON (D.location_id = L.location_id)
WHERE L.city = 'Toronto';
- SELECT E.last_name, E.job_id, E.department_id, D.department_name
FROM Employees E , Departments D , Locations L
WHERE E.department_id = D.department_id AND D.location_id = L.location_id 
AND L.city = 'Toronto';
4)
- SELECT E.last_name "Employee", E.employee_id "EMP#", M.last_name "Manager",
M.employee_id "Mgr#"
 FROM Employees E JOIN Employees M ON E.manager_id = M.employee_id;
- SELECT E.last_name "Employee", E.employee_id "EMP#", M.last_name "Manager", 
M.employee_id "Mgr#"
FROM Employees E, Employees M 
where E.manager_id = M.employee_id;
5) SELECT E.last_name "Employee", E.employee_id "EMP#", M.last_name "Manager", 
M.employee_id "Mgr#"
 FROM Employees E LEFT JOIN Employees M
 ON E.manager_id = M.employee_id
 ORDER BY EMP#;
6) SELECT
 e1.DEPARTMENT_ID AS "DEPARTMENT",
 e1.LAST_NAME AS "EMPLOYEE",
 e2.LAST_NAME AS "COLLEAGUE"
FROM EMPLOYEES e1
JOIN EMPLOYEES e2 ON e1.DEPARTMENT_ID = e2.DEPARTMENT_ID
ORDER BY e1.LAST_NAME, e1.DEPARTMENT_ID;
7) -- La table Job_grades n'existe plus et il n'y a pas de table equivalente
 -- La requête sans le grade est:
 SELECT e.LAST_NAME, e.JOB_ID, d.DEPARTMENT_NAME, e.SALARY
 FROM EMPLOYEES e
 JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;
8) SELECT e.LAST_NAME, e.HIRE_DATE
 FROM EMPLOYEES e
WHERE
e.HIRE_DATE > (SELECT HIRE_DATE FROM EMPLOYEES WHERE LAST_NAME = 'Davies')
9) SELECT e.LAST_NAME, e.HIRE_DATE, m.LAST_NAME, m.HIRE_DATE
FROM EMPLOYEES e
JOIN EMPLOYEES m ON e.MANAGER_ID = m.EMPLOYEE_ID
WHERE e.HIRE_DATE < m.HIRE_DATE;
Exercice 6:
1) SELECT LAST_NAME, HIRE_DATE
FROM EMPLOYEES
WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE 
INITCAP(LAST_NAME) = INITCAP('&&INPUTNAME')) AND INITCAP(LAST_NAME)!= 
INITCAP('&INPUTNAME');
2) SELECT EMPLOYEE_ID, LAST_NAME, SALARY 
FROM EMPLOYEES
WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES) 
ORDER BY SALARY ;
3) SELECT EMPLOYEE_ID, LAST_NAME 
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN 
(
 SELECT DEPARTMENT_ID 
 FROM EMPLOYEES 
 WHERE INSTR(LAST_NAME,'u') >= 1 or INSTR(LAST_NAME,'U') >= 1
);
4) SELECT e.LAST_NAME, e.DEPARTMENT_ID, e.JOB_ID
FROM EMPLOYEES e
JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
WHERE d.LOCATION_ID = &LOCATION_ID
5) SELECT LAST_NAME, SALARY
FROM EMPLOYEES
WHERE MANAGER_ID IN (
SELECT EMPLOYEE_ID FROM EMPLOYEES 
WHERE LAST_NAME = 'King'
)
6) SELECT e.DEPARTMENT_ID, e.LAST_NAME, e.JOB_ID
FROM EMPLOYEES e
JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
WHERE d.DEPARTMENT_NAME = 'Executive'
7) SELECT EMPLOYEE_ID, LAST_NAME, SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (
 SELECT DISTINCT DEPARTMENT_ID 
 FROM EMPLOYEES 
 WHERE INSTR(LAST_NAME,'u') >= 1 or INSTR(LAST_NAME,'U') >= 1
)
AND SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES)
Exercice 8:
1) SELECT DISTINCT e1.DEPARTMENT_ID FROM EMPLOYEES e1 
MINUS
SELECT DISTINCT e2.DEPARTMENT_ID FROM EMPLOYEES e2 WHERE e2.JOB_ID = 
'ST_CLERK' GROUP BY e2.DEPARTMENT_ID ;
2) (SELECT c.COUNTRY_ID, c.COUNTRY_NAME FROM COUNTRIES c LEFT JOIN 
LOCATIONS l ON l.COUNTRY_ID = c.COUNTRY_ID LEFT JOIN DEPARTMENTS d ON 
d.LOCATION_ID = l.LOCATION_ID) 
MINUS 
(SELECT c.COUNTRY_ID, c.COUNTRY_NAME FROM COUNTRIES c LEFT JOIN 
LOCATIONS l ON l.COUNTRY_ID = c.COUNTRY_ID LEFT JOIN DEPARTMENTS d ON 
d.LOCATION_ID = l.LOCATION_ID GROUP BY c.COUNTRY_NAME,c.COUNTRY_ID 
HAVING COUNT(l.LOCATION_ID) >= 1);
3) SELECT DISTINCT JOB_ID,DEPARTMENT_ID FROM EMPLOYEES 
WHERE DEPARTMENT_ID = 10 
UNION ALL 
SELECT DISTINCT JOB_ID,DEPARTMENT_ID FROM EMPLOYEES 
WHERE DEPARTMENT_ID = 50 
UNION ALL 
SELECT DISTINCT JOB_ID,DEPARTMENT_ID FROM EMPLOYEES WHERE 
DEPARTMENT_ID = 20;
4) SELECT EMPLOYEE_ID, JOB_ID 
FROM EMPLOYEES 
INTERSECT 
SELECT EMPLOYEE_ID, JOB_ID 
FROM JOB_HISTORY;
5) SELECT DISTINCT last_name, department_id, TO_CHAR(NULL) 
FROM employees 
UNION 
SELECT TO_CHAR(NULL), department_id, department_name 
FROM departments 
ORDER BY last_name;
Exercice 7:
1) CREATE TABLE MY_EMPLOYEE (
id number(4) not null,
last_name varchar2(25) null,
first_name varchar2(25) null,
userid varchar2(8) null,
salary number(9,2) null
--CONSTRAINT my_employee_id_pk primary key(id)
);
2) INSERT INTO MY_EMPLOYEE VALUES (1,'Patel','Ralph','rpatel',895);
3) INSERT INTO MY_EMPLOYEE(id, last_name, first_name, userid, salary) VALUES(2, 'Dancs', 
'Betty', 'bdancs', 860);
4) SELECT * FROM my_employee;
5) INSERT INTO MY_EMPLOYEE (ID,LAST_NAME,FIRST_NAME,USERID,SALARY) VALUES 
(&ID,'&LAST_NAME','&FIRST_NAME','&USERID',&SALARY);
6) Insérer les 2 lignes suivantes en utilisant le script précédent
7) SELECT * FROM my_employee;
8) COMMIT ;
9) update my_employee set last_name = 'Drexler' where id = 3;
10) update my_employee set salary = 1000 where salary < 900;
SELECT * FROM my_employee;
11) delete from MY_EMPLOYEE where last_name = 'Dancs' and first_name = 'Betty';
12) SELECT * FROM my_employee;
13) COMMIT;
14) SELECT * FROM my_employee;
15) SAVEPOINT save_point_1;
16) DELETE FROM MY_EMPLOYEE;
17) SELECT * FROM my_employee;
18) ROLLBACK;
19) SELECT * FROM MY_EMPLOYEE;
20) COMMIT;
21) INSERT INTO MY_EMPLOYEE (ID,LAST_NAME,FIRST_NAME,USERID,SALARY) 
VALUES 
(&id,'&&LAST_NAME','&&FIRST_NAME',LOWER(concat(SUBSTR('&FIRST_NAME',1,1),SUBSTR
('&LAST_NAME',1,7))),&SALARY);
22) Insérer l'enregistrement en utilisant le script précédent
23) SELECT * FROM MY_EMPLOYEE;
Exercice 10:
1) CREATE TABLE DEPT ( 
ID NUMBER(7) CONSTRAINT dept_dept_id_pk PRIMARY KEY, NAME VARCHAR2(25) 
);
2) INSERT INTO DEPT (ID, NAME) SELECT DEPARTMENT_ID, DEPARTMENT_NAME FROM 
DEPARTMENTS;
3) CREATE TABLE EMP ( ID NUMBER(7) , LAST_NAME VARCHAR2(25), FIRST_NAME 
VARCHAR2(25), DEPT_ID NUMBER(7) CONSTRAINT emp_dept_id_fk REFERENCES 
DEPT (ID));
4) CREATE TABLE EMPLOYEES2 (ID,FIRST_NAME,LAST_NAME,SALARY,DEPT_ID) AS 
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY, DEPARTMENT_ID FROM 
EMPLOYEES;
alter table EMPLOYEES2 add constraint emp2_dept_id_fk FOREIGN KEY (DEPT_ID) 
references DEPT (ID);
alter table EMPLOYEES2 add constraint emp2_emp_id_pk PRIMARY KEY (ID);
5) ALTER TABLE EMPLOYEES2 READ ONLY;
6) INSERT INTO EMPLOYEES2 VALUES (34,'Grant','Marcie',5678,10);
7) ALTER TABLE EMPLOYEES2 READ WRITE;
INSERT INTO EMPLOYEES2 VALUES (34,'Grant','Marcie',5678,10);
8) DROP TABLE EMPLOYEES2;
Exercice 11
1) CREATE VIEW EMPLOYEES_VU (EMPLOYEE_ID, EMPLOYEE, DEPARTMENT_ID) AS 
SELECT EMPLOYEE_ID, LAST_NAME, DEPARTMENT_ID FROM EMPLOYEES;
2) SELECT * FROM EMPLOYEES_VU;
3) SELECT EMPLOYEE, DEPARTMENT_ID FROM EMPLOYEES_VU;
4) CREATE VIEW DEPT50 (EMPNO,EMPLOYEE,DEPTNO) AS SELECT EMPLOYEE_ID, 
EMPLOYEE, DEPARTMENT_ID FROM EMPLOYEES_VU WHERE DEPARTMENT_ID = 50 
WITH READ ONLY;
5) DESCRIBE DEPT50;
SELECT * FROM DEPT50;
6) UPDATE DEPT50 SET DEPTNO = 80 WHERE EMPLOYEE = 'Matos';
7) CREATE SEQUENCE DEPT_ID_SEQ
 INCREMENT BY 10
 START WITH 280 -- La table dept à des ids qui vont jusqu'à 270 
 MAXVALUE 1000
 MINVALUE 280 -- Pour éviter des erreurs de conflits de PK
 NOCACHE
 NOCYCLE ;
8) INSERT INTO DEPT (ID,NAME) VALUES (DEPT_ID_SEQ.NEXTVAL,'Education');
INSERT INTO DEPT (ID,NAME) VALUES (DEPT_ID_SEQ.NEXTVAL,'Administration');
SELECT * from dept;
9) CREATE INDEX dept_name_idx ON DEPT(NAME);
10) CREATE SYNONYM EMP_SYNONYM FOR EMPLOYEES;